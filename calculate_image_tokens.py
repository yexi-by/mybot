#!/usr/bin/env python3
"""
Gemini API ÂõæÁâá Token ËÆ°ÁÆóÂ∑•ÂÖ∑

Áî®‰∫éËÆ°ÁÆóÂèëÈÄÅÂà∞ Gemini API ÁöÑÂõæÁâá‰ºöÊ∂àËÄóÂ§öÂ∞ë tokens
"""

import base64
import sys
from io import BytesIO
from pathlib import Path

try:
    from PIL import Image
except ImportError:
    print("ËØ∑ÂÖàÂÆâË£Ö Pillow: pip install Pillow")
    sys.exit(1)


def calculate_image_tokens(width: int, height: int) -> int:
    """
    Ê†πÊçÆ Gemini API ÂÆòÊñπÊñáÊ°£ËÆ°ÁÆóÂõæÁâá tokens
    
    ÂÖ¨Âºè: tokens = 258 + (ÂÆΩÂ∫¶ √ó È´òÂ∫¶) / 750
    
    Args:
        width: ÂõæÁâáÂÆΩÂ∫¶
        height: ÂõæÁâáÈ´òÂ∫¶
    
    Returns:
        ‰º∞ÁÆóÁöÑ token Êï∞Èáè
    """
    tokens = 258 + (width * height) / 750
    return int(tokens)


def analyze_image_file(image_path: str) -> dict:
    """
    ÂàÜÊûêÂõæÁâáÊñá‰ª∂Âπ∂ËÆ°ÁÆó token Ê∂àËÄó
    
    Args:
        image_path: ÂõæÁâáÊñá‰ª∂Ë∑ØÂæÑ
    
    Returns:
        ÂåÖÂê´ÂõæÁâá‰ø°ÊÅØÂíå token ËÆ°ÁÆóÁöÑÂ≠óÂÖ∏
    """
    try:
        img = Image.open(image_path)
        width, height = img.size
        file_size = Path(image_path).stat().st_size
        
        tokens = calculate_image_tokens(width, height)
        
        return {
            'path': image_path,
            'width': width,
            'height': height,
            'file_size': file_size,
            'file_size_kb': file_size / 1024,
            'file_size_mb': file_size / (1024 * 1024),
            'format': img.format,
            'tokens': tokens
        }
    except Exception as e:
        return {'error': str(e)}


def analyze_base64_image(base64_str: str) -> dict:
    """
    ÂàÜÊûê base64 ÁºñÁ†ÅÁöÑÂõæÁâáÂπ∂ËÆ°ÁÆó token Ê∂àËÄó
    
    Args:
        base64_str: base64 ÁºñÁ†ÅÁöÑÂõæÁâáÂ≠óÁ¨¶‰∏≤
    
    Returns:
        ÂåÖÂê´ÂõæÁâá‰ø°ÊÅØÂíå token ËÆ°ÁÆóÁöÑÂ≠óÂÖ∏
    """
    try:
        # ÁßªÈô§ÂèØËÉΩÁöÑ data:image ÂâçÁºÄ
        if ',' in base64_str:
            base64_str = base64_str.split(',')[-1]
        
        image_data = base64.b64decode(base64_str)
        img = Image.open(BytesIO(image_data))
        width, height = img.size
        
        tokens = calculate_image_tokens(width, height)
        
        return {
            'width': width,
            'height': height,
            'base64_length': len(base64_str),
            'decoded_size': len(image_data),
            'decoded_size_kb': len(image_data) / 1024,
            'format': img.format,
            'tokens': tokens
        }
    except Exception as e:
        return {'error': str(e)}


def calculate_quota_usage(tokens: int, prompt_length: int = 0) -> dict:
    """
    ËÆ°ÁÆóÈÖçÈ¢ù‰ΩøÁî®ÊÉÖÂÜµ
    
    Args:
        tokens: ÂõæÁâáÁöÑ token Êï∞
        prompt_length: ÊèêÁ§∫ËØçÂ≠óÁ¨¶ÈïøÂ∫¶
    
    Returns:
        ÈÖçÈ¢ù‰ΩøÁî®ÂàÜÊûê
    """
    # ‰º∞ÁÆóÊñáÊú¨ tokens (Á≤óÁï•: 1 token ‚âà 4 Â≠óÁ¨¶)
    text_tokens = prompt_length / 4
    total_tokens = tokens + text_tokens
    
    # Gemini 2.5 Flash Image ÁöÑÈôêÂà∂
    MAX_TOKENS_PER_MINUTE = 500000
    
    return {
        'image_tokens': tokens,
        'text_tokens': int(text_tokens),
        'total_tokens': int(total_tokens),
        'max_requests_per_minute': int(MAX_TOKENS_PER_MINUTE / total_tokens) if total_tokens > 0 else 0,
        'quota_limit': MAX_TOKENS_PER_MINUTE,
        'percentage_of_quota': (total_tokens / MAX_TOKENS_PER_MINUTE) * 100
    }


def print_analysis(info: dict, prompt_length: int = 0):
    """ÊâìÂç∞ËØ¶ÁªÜÁöÑÂàÜÊûêÊä•Âëä"""
    print("\n" + "="*60)
    print("üìä Gemini API ÂõæÁâá Token ÂàÜÊûêÊä•Âëä")
    print("="*60)
    
    if 'error' in info:
        print(f"‚ùå ÈîôËØØ: {info['error']}")
        return
    
    # ÂõæÁâáÂü∫Êú¨‰ø°ÊÅØ
    print(f"\nüñºÔ∏è  ÂõæÁâá‰ø°ÊÅØ:")
    if 'path' in info:
        print(f"   Êñá‰ª∂Ë∑ØÂæÑ: {info['path']}")
        print(f"   Êñá‰ª∂Ê†ºÂºè: {info.get('format', 'Unknown')}")
        print(f"   Êñá‰ª∂Â§ßÂ∞è: {info['file_size_kb']:.2f} KB ({info['file_size_mb']:.2f} MB)")
    else:
        print(f"   Êù•Ê∫ê: Base64 ÁºñÁ†Å")
        print(f"   Ê†ºÂºè: {info.get('format', 'Unknown')}")
        print(f"   Base64 ÈïøÂ∫¶: {info.get('base64_length', 0):,} Â≠óÁ¨¶")
        print(f"   Ëß£Á†ÅÂêéÂ§ßÂ∞è: {info.get('decoded_size_kb', 0):.2f} KB")
    
    print(f"   ÂàÜËæ®Áéá: {info['width']} √ó {info['height']} ÂÉèÁ¥†")
    
    # Token ËÆ°ÁÆó
    print(f"\nüí∞ Token Ê∂àËÄó:")
    print(f"   ÂõæÁâá Tokens: {info['tokens']:,}")
    print(f"   ËÆ°ÁÆóÂÖ¨Âºè: 258 + ({info['width']} √ó {info['height']}) / 750")
    
    # ÈÖçÈ¢ùÂàÜÊûê
    quota = calculate_quota_usage(info['tokens'], prompt_length)
    print(f"\nüìà ÈÖçÈ¢ù‰ΩøÁî®ÂàÜÊûê:")
    print(f"   ÂõæÁâá Tokens: {quota['image_tokens']:,}")
    if prompt_length > 0:
        print(f"   ÊñáÊú¨ Tokens (‰º∞ÁÆó): {quota['text_tokens']:,}")
        print(f"   ÊÄª Tokens: {quota['total_tokens']:,}")
    print(f"   ÊØèÂàÜÈíüÊúÄÂ§öËØ∑Ê±Ç: {quota['max_requests_per_minute']} Ê¨°")
    print(f"   ÂçïÊ¨°ËØ∑Ê±ÇÂç†ÈÖçÈ¢ù: {quota['percentage_of_quota']:.4f}%")
    print(f"   ÈÖçÈ¢ùÈôêÂà∂: {quota['quota_limit']:,} tokens/ÂàÜÈíü")
    
    # Â∏∏ËßÅÂ∞∫ÂØ∏ÂØπÊØî
    print(f"\nüìè Â∏∏ËßÅÂ∞∫ÂØ∏ Token ÂØπÊØî:")
    common_sizes = [
        (512, 512, "Â∞èÂõæ"),
        (1024, 1024, "Ê†áÂáÜ"),
        (1920, 1080, "Full HD"),
        (2048, 2048, "È´òÊ∏Ö"),
        (4096, 4096, "Ë∂ÖÈ´òÊ∏Ö"),
    ]
    
    for w, h, label in common_sizes:
        tokens = calculate_image_tokens(w, h)
        marker = " ‚Üê ÂΩìÂâç" if w == info['width'] and h == info['height'] else ""
        print(f"   {label:8} ({w:4}√ó{h:4}): {tokens:6,} tokens{marker}")
    
    print("\n" + "="*60 + "\n")


def main():
    """‰∏ªÂáΩÊï∞ - ‰∫§‰∫íÂºè‰ΩøÁî®"""
    print("\nüé® Gemini API ÂõæÁâá Token ËÆ°ÁÆóÂô®")
    print("="*60)
    
    while True:
        print("\nËØ∑ÈÄâÊã©:")
        print("1. ÂàÜÊûêÂõæÁâáÊñá‰ª∂")
        print("2. ËÆ°ÁÆóÊåáÂÆöÂ∞∫ÂØ∏")
        print("3. ÂàÜÊûê Base64 ÂõæÁâá")
        print("4. ÈÄÄÂá∫")
        
        choice = input("\nËæìÂÖ•ÈÄâÈ°π (1-4): ").strip()
        
        if choice == '1':
            path = input("ËØ∑ËæìÂÖ•ÂõæÁâáÊñá‰ª∂Ë∑ØÂæÑ: ").strip()
            prompt_len = input("ÊèêÁ§∫ËØçÂ≠óÁ¨¶ÈïøÂ∫¶ (ÂèØÈÄâ,Áõ¥Êé•ÂõûËΩ¶Ë∑≥Ëøá): ").strip()
            prompt_len = int(prompt_len) if prompt_len else 0
            
            info = analyze_image_file(path)
            print_analysis(info, prompt_len)
            
        elif choice == '2':
            try:
                width = int(input("ËØ∑ËæìÂÖ•ÂÆΩÂ∫¶: ").strip())
                height = int(input("ËØ∑ËæìÂÖ•È´òÂ∫¶: ").strip())
                prompt_len = input("ÊèêÁ§∫ËØçÂ≠óÁ¨¶ÈïøÂ∫¶ (ÂèØÈÄâ,Áõ¥Êé•ÂõûËΩ¶Ë∑≥Ëøá): ").strip()
                prompt_len = int(prompt_len) if prompt_len else 0
                
                tokens = calculate_image_tokens(width, height)
                info = {
                    'width': width,
                    'height': height,
                    'tokens': tokens
                }
                print_analysis(info, prompt_len)
            except ValueError:
                print("‚ùå ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÊï∞Â≠ó")
                
        elif choice == '3':
            base64_str = input("ËØ∑ËæìÂÖ• Base64 Â≠óÁ¨¶‰∏≤ (ÊàñÊñá‰ª∂Ë∑ØÂæÑ): ").strip()
            
            # Â¶ÇÊûúÊòØÊñá‰ª∂Ë∑ØÂæÑ,ËØªÂèñÊñá‰ª∂ÂÜÖÂÆπ
            if Path(base64_str).is_file():
                with open(base64_str, 'r') as f:
                    base64_str = f.read().strip()
            
            prompt_len = input("ÊèêÁ§∫ËØçÂ≠óÁ¨¶ÈïøÂ∫¶ (ÂèØÈÄâ,Áõ¥Êé•ÂõûËΩ¶Ë∑≥Ëøá): ").strip()
            prompt_len = int(prompt_len) if prompt_len else 0
            
            info = analyze_base64_image(base64_str)
            print_analysis(info, prompt_len)
            
        elif choice == '4':
            print("\nüëã ÂÜçËßÅ!")
            break
        else:
            print("‚ùå Êó†ÊïàÈÄâÈ°π,ËØ∑ÈáçÊñ∞ÈÄâÊã©")


if __name__ == "__main__":
    # Â¶ÇÊûúÊúâÂëΩ‰ª§Ë°åÂèÇÊï∞,Áõ¥Êé•ÂàÜÊûê
    if len(sys.argv) > 1:
        if sys.argv[1].isdigit() and len(sys.argv) >= 3:
            # Áõ¥Êé•ËÆ°ÁÆóÂ∞∫ÂØ∏: python calculate_image_tokens.py 1024 1024
            width = int(sys.argv[1])
            height = int(sys.argv[2])
            prompt_len = int(sys.argv[3]) if len(sys.argv) > 3 else 0
            
            tokens = calculate_image_tokens(width, height)
            info = {
                'width': width,
                'height': height,
                'tokens': tokens
            }
            print_analysis(info, prompt_len)
        else:
            # ÂàÜÊûêÊñá‰ª∂: python calculate_image_tokens.py image.png
            prompt_len = int(sys.argv[2]) if len(sys.argv) > 2 else 0
            info = analyze_image_file(sys.argv[1])
            print_analysis(info, prompt_len)
    else:
        # ‰∫§‰∫íÂºèÊ®°Âºè
        main()
